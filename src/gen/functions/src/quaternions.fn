
group Quaternions;

// ************
// *** BUILDING
// ************

fn NewQuat4d {
    in LDouble u;
    in LDouble i;
    in LDouble j;
    in LDouble k;
    fout Quaternion;

    eval {
        return new Quaternion(
            u.val, i.val, j.val, k.val
            );
    }

    estimate {
        return new Estimate_q(
            u.getMinimum(), u.getMaximum(),
            i.getMinimum(), i.getMaximum(),
            j.getMinimum(), j.getMaximum(),
            k.getMinimum(), k.getMaximum()
            );
    }
}

fn NewQuat2c1 {
    in Complex a;
    in Complex b;
    fout Quaternion;

    eval {
        return new Quaternion(
            a.x, a.y, b.x, b.y
            );
    }

    estimate {
        return new Estimate_q(
            a.getXMinimum(), a.getXMaximum(),
            a.getYMinimum(), a.getYMaximum(),
            b.getXMinimum(), b.getXMaximum(),
            b.getYMinimum(), b.getYMaximum()
            );
    }
}

fn NewQuatdv3 {
    in LDouble a;
    in LVect3d b;
    fout Quaternion;

    eval {
        return new Quaternion(
            a.val, b.x, b.y, b.z
            );
    }

    estimate {
        return new Estimate_q(
            a.getMinimum(), a.getMaximum(),
            b.getXMinimum(), b.getXMaximum(),
            b.getYMinimum(), b.getYMaximum(),
            b.getZMinimum(), b.getZMaximum()
            );
    }
}

fn NewQuat2c2 {
    in Complex a;
    in Complex b;
    fout Quaternion;

    eval {
        return new Quaternion(
            a.x*b.x, a.y*b.x, b.y*a.x, a.y*b.y
            );
    }

    estimate {
        double umin = Math.min( Math.min( a.getXMinimum()*b.getXMinimum(), a.getXMinimum()*b.getXMaximum() ),
                                Math.min( a.getXMaximum()*b.getXMinimum(), a.getXMaximum()*b.getXMaximum() ) );
        double umax = Math.max( Math.max( a.getXMinimum()*b.getXMinimum(), a.getXMinimum()*b.getXMaximum() ),
                                Math.max( a.getXMaximum()*b.getXMinimum(), a.getXMaximum()*b.getXMaximum() ) );
        double imin = Math.min( Math.min( a.getYMinimum()*b.getXMinimum(), a.getYMinimum()*b.getXMaximum() ),
                                Math.min( a.getYMinimum()*b.getXMinimum(), a.getYMinimum()*b.getXMaximum() ) );
        double imax = Math.max( Math.max( a.getYMinimum()*b.getXMinimum(), a.getYMinimum()*b.getXMaximum() ),
                                Math.max( a.getYMinimum()*b.getXMinimum(), a.getYMinimum()*b.getXMaximum() ) );
        double jmin = Math.min( Math.min( a.getXMaximum()*b.getYMinimum(), a.getXMaximum()*b.getYMinimum() ),
                                Math.min( a.getXMaximum()*b.getYMinimum(), a.getXMaximum()*b.getYMinimum() ) );
        double jmax = Math.max( Math.max( a.getXMaximum()*b.getYMinimum(), a.getXMaximum()*b.getYMinimum() ),
                                Math.max( a.getXMaximum()*b.getYMinimum(), a.getXMaximum()*b.getYMinimum() ) );
        double kmin = Math.min( Math.min( a.getYMinimum()*b.getYMinimum(), a.getYMinimum()*b.getYMinimum() ),
                                Math.min( a.getYMinimum()*b.getYMinimum(), a.getYMinimum()*b.getYMinimum() ) );
        double kmax = Math.max( Math.max( a.getYMinimum()*b.getYMinimum(), a.getYMinimum()*b.getYMinimum() ),
                                Math.max( a.getYMinimum()*b.getYMinimum(), a.getYMinimum()*b.getYMinimum() ) );

        return new Estimate_q(
            umin, umax, imin, imax, jmin, jmax, kmin, kmax
            );
    }
}

// ***************
// *** DECOMPOSING
// ***************

fn q_u {
    in Quaternion q;
    fout LDouble;
    eval { return new LDouble(q.u); }
    estimate { return new Estimate_d(q.getUMinimum(), q.getUMaximum()); }
}

fn q_i {
    in Quaternion q;
    fout LDouble;
    eval { return new LDouble(q.i); }
    estimate { return new Estimate_d(q.getIMinimum(), q.getIMaximum()); }
}

fn q_j {
    in Quaternion q;
    fout LDouble;
    eval { return new LDouble(q.j); }
    estimate { return new Estimate_d(q.getJMinimum(), q.getJMaximum()); }
}

fn q_k {
    in Quaternion q;
    fout LDouble;
    eval { return new LDouble(q.k); }
    estimate { return new Estimate_d(q.getKMinimum(), q.getKMaximum()); }
}

fn q_angle {
    in Quaternion q;
    fout LDouble;
    eval { return new LDouble(q.anglePart()); }
    estimate { return new Estimate_d(0,Math.PI); }
}

fn q_magnitude {
    in Quaternion q;
    fout LDouble;
    eval { return new LDouble(q.magnitude()); }
    estimate { return new Estimate_d( q.getMinMagnitude(), q.getMaxMagnitude() ); }
}

fn q_ci {
    in Quaternion q;
    fout Complex;
    eval { return new Complex(q.u, q.i); }
    estimate { return new Estimate_c(q.getUMinimum(), q.getUMaximum(), q.getIMinimum(), q.getIMaximum()); }
}

fn q_cj {
    in Quaternion q;
    fout Complex;
    eval { return new Complex(q.u, q.j); }
    estimate { return new Estimate_c(q.getUMinimum(), q.getUMaximum(), q.getJMinimum(), q.getJMaximum()); }
}

fn q_ck {
    in Quaternion q;
    fout Complex;
    eval { return new Complex(q.u, q.k); }
    estimate { return new Estimate_c(q.getUMinimum(), q.getUMaximum(), q.getKMinimum(), q.getKMaximum()); }
}

fn q_v3 {
    in Quaternion q;
    fout LVect3d;
    eval { return q.vectorPart(); }
    estimate { return q.getVectorEstimate(); }
}

fn q_col {
    in Quaternion q;
    fout Color;
    eval { return new Color(q.i,q.j,q.k); }
    estimate { return new Estimate_col( q.getIMinimum(), q.getIMaximum(), q.getJMinimum(), q.getJMaximum(), q.getKMinimum(), q.getKMaximum() ); }
}

// *************
// *** ALGEBRAIC
// *************

fn add {
    in Quaternion a;
    in Quaternion b;
    fout Quaternion;

    eval {return a.add(b);}
    estimate { return new Estimate_q(
            a.getUMinimum()+b.getUMinimum(), a.getUMaximum()+b.getUMaximum(),
            a.getIMinimum()+b.getIMinimum(), a.getIMaximum()+b.getIMaximum(),
            a.getJMinimum()+b.getJMinimum(), a.getJMaximum()+b.getJMaximum(),
            a.getKMinimum()+b.getKMinimum(), a.getKMaximum()+b.getKMaximum()
            ); }
}

fn sub {
    in Quaternion a;
    in Quaternion b;
    fout Quaternion;

    eval {return a.sub(b);}
    estimate { return new Estimate_q(
            a.getUMinimum()-b.getUMinimum(), a.getUMaximum()-b.getUMaximum(),
            a.getIMinimum()-b.getIMinimum(), a.getIMaximum()-b.getIMaximum(),
            a.getJMinimum()-b.getJMinimum(), a.getJMaximum()-b.getJMaximum(),
            a.getKMinimum()-b.getKMinimum(), a.getKMaximum()-b.getKMaximum()
            ); }
}

fn mult {
    in Quaternion a;
    in Quaternion b;
    fout Quaternion;

    eval {return a.mult(b);}
}

fn div {
    in Quaternion a;
    in Quaternion b;
    fout Quaternion;

    eval {return a.div(b);}
}

fn powq {
    in Quaternion a;
    in Quaternion b;
    fout Quaternion;

    eval {return a.pow(b);}
}

fn pow {
    in Quaternion a;
    in LDouble b;
    fout Quaternion;

    eval {return a.pow(b.val);}
}

fn invert {
    in Quaternion a;
    fout Quaternion;

    eval {return a.invert();}
}

// ************
// *** ANALYTIC
// ************

// well, not really, since functions on quaternions aren't really analytic...

fn square {
    in Quaternion a;
    fout Quaternion;
    eval {return a.mult(a);}
}

fn exp {
    in Quaternion a;
    fout Quaternion;
    eval {return a.exp();}
}

fn log {
    in Quaternion a;
    fout Quaternion;
    eval {return a.log();}
}

fn sin {
    in Quaternion a;
    fout Quaternion;
    eval {return a.sin();}
}
fn cos {
    in Quaternion a;
    fout Quaternion;
    eval {return a.cos();}
}
fn tan {
    in Quaternion a;
    fout Quaternion;
    eval {return a.tan();}
}

fn sinh {
    in Quaternion a;
    fout Quaternion;
    eval {return a.sinh();}
}
fn cosh {
    in Quaternion a;
    fout Quaternion;
    eval {return a.cosh();}
}
fn tanh {
    in Quaternion a;
    fout Quaternion;
    eval {return a.tanh();}
}

fn arcsin {
    in Quaternion a;
    fout Quaternion;
    eval {return a.arcsin();}
}
fn arccos {
    in Quaternion a;
    fout Quaternion;
    eval {return a.arccos();}
}
fn arctan {
    in Quaternion a;
    fout Quaternion;
    eval {return a.arctan();}
}

fn arcsinh {
    in Quaternion a;
    fout Quaternion;
    eval {return a.arcsinh();}
}
fn arccosh {
    in Quaternion a;
    fout Quaternion;
    eval {return a.arccosh();}
}
fn arctanh {
    in Quaternion a;
    fout Quaternion;
    eval {return a.arctanh();}
}

// *****************
// *** MISCELLANEOUS
// *****************

fn isin {
    in Quaternion a;
    fout Quaternion;
    eval {
        return new Quaternion(
            Math.sin(a.u),
            Math.sin(a.i),
            Math.sin(a.j),
            Math.sin(a.k)
            );
    }
}
fn icos {
    in Quaternion a;
    fout Quaternion;
    eval {
        return new Quaternion(
            Math.cos(a.u),
            Math.cos(a.i),
            Math.cos(a.j),
            Math.cos(a.k)
            );
    }
}
fn itan {
    in Quaternion a;
    fout Quaternion;
    eval {
        return new Quaternion(
            Math.tan(a.u),
            Math.tan(a.i),
            Math.tan(a.j),
            Math.tan(a.k)
            );
    }
}
fn iexp {
    in Quaternion a;
    fout Quaternion;
    eval {
        return new Quaternion(
            Math.exp(a.u),
            Math.exp(a.i),
            Math.exp(a.j),
            Math.exp(a.k)
            );
    }
}
fn ilog {
    in Quaternion a;
    fout Quaternion;
    eval {
        return new Quaternion(
            Math.log(a.u),
            Math.log(a.i),
            Math.log(a.j),
            Math.log(a.k)
            );
    }
}

fn swapl {
    in Quaternion a;
    fout Quaternion;
    eval {
        return new Quaternion(
            a.i, a.j, a.k, a.u
            );
    }
}
fn swapr {
    in Quaternion a;
    fout Quaternion;
    eval {
        return new Quaternion(
            a.k, a.u, a.i, a.j
            );
    }
}
fn conj {
    in Quaternion a;
    fout Quaternion;
    eval {
        return a.conj();
    }
}

fn aut1 {
    in Quaternion a;
    in Quaternion b;
    fout Quaternion;
    eval {
        return b.div(a).mult(a);
    }
}
fn aut2 {
    in Quaternion a;
    in Quaternion b;
    fout Quaternion;
    eval {
        return b.div(a.conj()).mult(a);
    }
}

fn orth {
    in Quaternion a;
    in Quaternion b;
    fout Quaternion;
    
    eval {
        return a.normal().mult(b.mult(a.normal().conj()));
    }
}

fn mod {
    in Quaternion a;
    fout Quaternion;

    eval {
        return new Quaternion(
            a.u - Math.floor(a.u),
            a.i - Math.floor(a.i),
            a.j - Math.floor(a.j),
            a.k - Math.floor(a.k)
            );
    }
}
